/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     * 
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    'detail'?: Array<ValidationError>;
}
/**
 * 
 * @export
 * @interface Match
 */
export interface Match {
    /**
     * 
     * @type {string}
     * @memberof Match
     */
    'home_team_id': string;
    /**
     * 
     * @type {string}
     * @memberof Match
     */
    'away_team_id': string;
    /**
     * 
     * @type {string}
     * @memberof Match
     */
    'user_id': string;
    /**
     * 
     * @type {string}
     * @memberof Match
     */
    'season_id': string;
}
/**
 * 
 * @export
 * @interface MatchPostRequest
 */
export interface MatchPostRequest {
    /**
     * 
     * @type {Match}
     * @memberof MatchPostRequest
     */
    'Match': Match;
    /**
     * 
     * @type {{ [key: string]: PlayerMatchInfo; }}
     * @memberof MatchPostRequest
     */
    'PlayerMatchInfo': { [key: string]: PlayerMatchInfo; };
}
/**
 * 
 * @export
 * @interface MatchRequest
 */
export interface MatchRequest {
    /**
     * 
     * @type {TeamRequest}
     * @memberof MatchRequest
     */
    'home_team': TeamRequest;
    /**
     * 
     * @type {TeamRequest}
     * @memberof MatchRequest
     */
    'away_team': TeamRequest;
    /**
     * 
     * @type {string}
     * @memberof MatchRequest
     */
    'season_name': string;
}
/**
 * 
 * @export
 * @interface PlayerBase
 */
export interface PlayerBase {
    /**
     * 
     * @type {string}
     * @memberof PlayerBase
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof PlayerBase
     */
    'player_number': number;
    /**
     * 
     * @type {string}
     * @memberof PlayerBase
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof PlayerBase
     */
    'postion': string;
    /**
     * 
     * @type {number}
     * @memberof PlayerBase
     */
    'weight': number;
    /**
     * 
     * @type {number}
     * @memberof PlayerBase
     */
    'height': number;
    /**
     * 
     * @type {string}
     * @memberof PlayerBase
     */
    'user_id': string;
    /**
     * 
     * @type {string}
     * @memberof PlayerBase
     */
    'team_id': string;
    /**
     * 
     * @type {string}
     * @memberof PlayerBase
     */
    'season_id': string;
}
/**
 * 
 * @export
 * @interface PlayerGet
 */
export interface PlayerGet {
    /**
     * 
     * @type {string}
     * @memberof PlayerGet
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof PlayerGet
     */
    'player_number': number;
    /**
     * 
     * @type {string}
     * @memberof PlayerGet
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof PlayerGet
     */
    'postion': string;
    /**
     * 
     * @type {number}
     * @memberof PlayerGet
     */
    'weight': number;
    /**
     * 
     * @type {number}
     * @memberof PlayerGet
     */
    'height': number;
    /**
     * 
     * @type {string}
     * @memberof PlayerGet
     */
    'user_id': string;
    /**
     * 
     * @type {string}
     * @memberof PlayerGet
     */
    'team_id': string;
    /**
     * 
     * @type {string}
     * @memberof PlayerGet
     */
    'season_id': string;
    /**
     * 
     * @type {string}
     * @memberof PlayerGet
     */
    'uuid': string;
}
/**
 * 
 * @export
 * @interface PlayerInfo
 */
export interface PlayerInfo {
    /**
     * 
     * @type {string}
     * @memberof PlayerInfo
     */
    'uuid': string;
    /**
     * 
     * @type {string}
     * @memberof PlayerInfo
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof PlayerInfo
     */
    'player_number': number;
    /**
     * 
     * @type {string}
     * @memberof PlayerInfo
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof PlayerInfo
     */
    'postion': string;
    /**
     * 
     * @type {number}
     * @memberof PlayerInfo
     */
    'weight'?: number;
    /**
     * 
     * @type {number}
     * @memberof PlayerInfo
     */
    'height'?: number;
}
/**
 * 
 * @export
 * @interface PlayerMatchInfo
 */
export interface PlayerMatchInfo {
    /**
     * 
     * @type {string}
     * @memberof PlayerMatchInfo
     */
    'player_id': string;
    /**
     * 
     * @type {boolean}
     * @memberof PlayerMatchInfo
     */
    'on_court': boolean;
    /**
     * 
     * @type {string}
     * @memberof PlayerMatchInfo
     */
    'zone_code'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof PlayerMatchInfo
     */
    'libero'?: boolean;
}
/**
 * 
 * @export
 * @interface PlayerUpdate
 */
export interface PlayerUpdate {
    /**
     * 
     * @type {string}
     * @memberof PlayerUpdate
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof PlayerUpdate
     */
    'player_number': number;
    /**
     * 
     * @type {string}
     * @memberof PlayerUpdate
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof PlayerUpdate
     */
    'postion': string;
    /**
     * 
     * @type {number}
     * @memberof PlayerUpdate
     */
    'weight': number;
    /**
     * 
     * @type {number}
     * @memberof PlayerUpdate
     */
    'height': number;
    /**
     * 
     * @type {string}
     * @memberof PlayerUpdate
     */
    'user_id': string;
    /**
     * 
     * @type {string}
     * @memberof PlayerUpdate
     */
    'team_id': string;
    /**
     * 
     * @type {string}
     * @memberof PlayerUpdate
     */
    'season_id': string;
    /**
     * 
     * @type {string}
     * @memberof PlayerUpdate
     */
    'uuid': string;
}
/**
 * 
 * @export
 * @interface SeasonBase
 */
export interface SeasonBase {
    /**
     * 
     * @type {string}
     * @memberof SeasonBase
     */
    'start_day': string;
    /**
     * 
     * @type {string}
     * @memberof SeasonBase
     */
    'end_day': string;
    /**
     * 
     * @type {string}
     * @memberof SeasonBase
     */
    'season_name': string;
    /**
     * 
     * @type {string}
     * @memberof SeasonBase
     */
    'game_format': string;
    /**
     * 
     * @type {string}
     * @memberof SeasonBase
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof SeasonBase
     */
    'user_id': string;
}
/**
 * 
 * @export
 * @interface SeasonGet
 */
export interface SeasonGet {
    /**
     * 
     * @type {string}
     * @memberof SeasonGet
     */
    'start_day': string;
    /**
     * 
     * @type {string}
     * @memberof SeasonGet
     */
    'end_day': string;
    /**
     * 
     * @type {string}
     * @memberof SeasonGet
     */
    'season_name': string;
    /**
     * 
     * @type {string}
     * @memberof SeasonGet
     */
    'game_format': string;
    /**
     * 
     * @type {string}
     * @memberof SeasonGet
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof SeasonGet
     */
    'user_id': string;
    /**
     * 
     * @type {string}
     * @memberof SeasonGet
     */
    'uuid': string;
}
/**
 * 
 * @export
 * @interface TeamBase
 */
export interface TeamBase {
    /**
     * 
     * @type {string}
     * @memberof TeamBase
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof TeamBase
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof TeamBase
     */
    'director': string;
    /**
     * 
     * @type {string}
     * @memberof TeamBase
     */
    'coach': string;
    /**
     * 
     * @type {string}
     * @memberof TeamBase
     */
    'trainer': string;
    /**
     * 
     * @type {string}
     * @memberof TeamBase
     */
    'doctor': string;
    /**
     * 
     * @type {string}
     * @memberof TeamBase
     */
    'season_id': string;
    /**
     * 
     * @type {string}
     * @memberof TeamBase
     */
    'user_id': string;
}
/**
 * 
 * @export
 * @interface TeamGet
 */
export interface TeamGet {
    /**
     * 
     * @type {string}
     * @memberof TeamGet
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof TeamGet
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof TeamGet
     */
    'director': string;
    /**
     * 
     * @type {string}
     * @memberof TeamGet
     */
    'coach': string;
    /**
     * 
     * @type {string}
     * @memberof TeamGet
     */
    'trainer': string;
    /**
     * 
     * @type {string}
     * @memberof TeamGet
     */
    'doctor': string;
    /**
     * 
     * @type {string}
     * @memberof TeamGet
     */
    'season_id': string;
    /**
     * 
     * @type {string}
     * @memberof TeamGet
     */
    'user_id': string;
    /**
     * 
     * @type {string}
     * @memberof TeamGet
     */
    'uuid': string;
}
/**
 * 
 * @export
 * @interface TeamPlayers
 */
export interface TeamPlayers {
    /**
     * 
     * @type {PlayerInfo}
     * @memberof TeamPlayers
     */
    'PlayerInfo': PlayerInfo;
    /**
     * 
     * @type {boolean}
     * @memberof TeamPlayers
     */
    'onCourt': boolean;
    /**
     * 
     * @type {string}
     * @memberof TeamPlayers
     */
    'zone_code'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof TeamPlayers
     */
    'libero'?: boolean;
}
/**
 * 
 * @export
 * @interface TeamRequest
 */
export interface TeamRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamRequest
     */
    'team_name': string;
    /**
     * 
     * @type {{ [key: string]: TeamPlayers; }}
     * @memberof TeamRequest
     */
    'players': { [key: string]: TeamPlayers; };
    /**
     * 
     * @type {string}
     * @memberof TeamRequest
     */
    'setter_postion': string;
}
/**
 * 
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {Array<string>}
     * @memberof ValidationError
     */
    'loc': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'type': string;
}

/**
 * MatchesApi - axios parameter creator
 * @export
 */
export const MatchesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create Match
         * @param {MatchPostRequest} matchPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMatchMatchesPost: async (matchPostRequest: MatchPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'matchPostRequest' is not null or undefined
            assertParamExists('createMatchMatchesPost', 'matchPostRequest', matchPostRequest)
            const localVarPath = `/matches/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(matchPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Matches
         * @param {string} userId 
         * @param {number} [skip] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMatchesMatchesGet: async (userId: string, skip?: number, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getMatchesMatchesGet', 'userId', userId)
            const localVarPath = `/matches/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MatchesApi - functional programming interface
 * @export
 */
export const MatchesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MatchesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create Match
         * @param {MatchPostRequest} matchPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createMatchMatchesPost(matchPostRequest: MatchPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MatchPostRequest>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createMatchMatchesPost(matchPostRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['MatchesApi.createMatchMatchesPost']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Get Matches
         * @param {string} userId 
         * @param {number} [skip] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMatchesMatchesGet(userId: string, skip?: number, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MatchRequest>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMatchesMatchesGet(userId, skip, limit, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['MatchesApi.getMatchesMatchesGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * MatchesApi - factory interface
 * @export
 */
export const MatchesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MatchesApiFp(configuration)
    return {
        /**
         * 
         * @summary Create Match
         * @param {MatchPostRequest} matchPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMatchMatchesPost(matchPostRequest: MatchPostRequest, options?: any): AxiosPromise<MatchPostRequest> {
            return localVarFp.createMatchMatchesPost(matchPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Matches
         * @param {string} userId 
         * @param {number} [skip] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMatchesMatchesGet(userId: string, skip?: number, limit?: number, options?: any): AxiosPromise<Array<MatchRequest>> {
            return localVarFp.getMatchesMatchesGet(userId, skip, limit, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MatchesApi - object-oriented interface
 * @export
 * @class MatchesApi
 * @extends {BaseAPI}
 */
export class MatchesApi extends BaseAPI {
    /**
     * 
     * @summary Create Match
     * @param {MatchPostRequest} matchPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MatchesApi
     */
    public createMatchMatchesPost(matchPostRequest: MatchPostRequest, options?: RawAxiosRequestConfig) {
        return MatchesApiFp(this.configuration).createMatchMatchesPost(matchPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Matches
     * @param {string} userId 
     * @param {number} [skip] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MatchesApi
     */
    public getMatchesMatchesGet(userId: string, skip?: number, limit?: number, options?: RawAxiosRequestConfig) {
        return MatchesApiFp(this.configuration).getMatchesMatchesGet(userId, skip, limit, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * PlayersApi - axios parameter creator
 * @export
 */
export const PlayersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create Player
         * @param {PlayerBase} playerBase 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPlayerPlayersPost: async (playerBase: PlayerBase, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'playerBase' is not null or undefined
            assertParamExists('createPlayerPlayersPost', 'playerBase', playerBase)
            const localVarPath = `/players/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(playerBase, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Player
         * @param {string} userId 
         * @param {string} playerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePlayerPlayersDelete: async (userId: string, playerId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('deletePlayerPlayersDelete', 'userId', userId)
            // verify required parameter 'playerId' is not null or undefined
            assertParamExists('deletePlayerPlayersDelete', 'playerId', playerId)
            const localVarPath = `/players/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }

            if (playerId !== undefined) {
                localVarQueryParameter['player_id'] = playerId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Players
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlayersPlayersGet: async (userId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getPlayersPlayersGet', 'userId', userId)
            const localVarPath = `/players/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Player
         * @param {string} userId 
         * @param {string} playerId 
         * @param {PlayerUpdate} playerUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePlayerPlayersPut: async (userId: string, playerId: string, playerUpdate: PlayerUpdate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('updatePlayerPlayersPut', 'userId', userId)
            // verify required parameter 'playerId' is not null or undefined
            assertParamExists('updatePlayerPlayersPut', 'playerId', playerId)
            // verify required parameter 'playerUpdate' is not null or undefined
            assertParamExists('updatePlayerPlayersPut', 'playerUpdate', playerUpdate)
            const localVarPath = `/players/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }

            if (playerId !== undefined) {
                localVarQueryParameter['player_id'] = playerId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(playerUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PlayersApi - functional programming interface
 * @export
 */
export const PlayersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PlayersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create Player
         * @param {PlayerBase} playerBase 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPlayerPlayersPost(playerBase: PlayerBase, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlayerBase>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPlayerPlayersPost(playerBase, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PlayersApi.createPlayerPlayersPost']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Delete Player
         * @param {string} userId 
         * @param {string} playerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePlayerPlayersDelete(userId: string, playerId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlayerBase>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePlayerPlayersDelete(userId, playerId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PlayersApi.deletePlayerPlayersDelete']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Get Players
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPlayersPlayersGet(userId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PlayerGet>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPlayersPlayersGet(userId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PlayersApi.getPlayersPlayersGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Update Player
         * @param {string} userId 
         * @param {string} playerId 
         * @param {PlayerUpdate} playerUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePlayerPlayersPut(userId: string, playerId: string, playerUpdate: PlayerUpdate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlayerBase>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePlayerPlayersPut(userId, playerId, playerUpdate, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PlayersApi.updatePlayerPlayersPut']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * PlayersApi - factory interface
 * @export
 */
export const PlayersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PlayersApiFp(configuration)
    return {
        /**
         * 
         * @summary Create Player
         * @param {PlayerBase} playerBase 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPlayerPlayersPost(playerBase: PlayerBase, options?: any): AxiosPromise<PlayerBase> {
            return localVarFp.createPlayerPlayersPost(playerBase, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Player
         * @param {string} userId 
         * @param {string} playerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePlayerPlayersDelete(userId: string, playerId: string, options?: any): AxiosPromise<PlayerBase> {
            return localVarFp.deletePlayerPlayersDelete(userId, playerId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Players
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlayersPlayersGet(userId: string, options?: any): AxiosPromise<Array<PlayerGet>> {
            return localVarFp.getPlayersPlayersGet(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Player
         * @param {string} userId 
         * @param {string} playerId 
         * @param {PlayerUpdate} playerUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePlayerPlayersPut(userId: string, playerId: string, playerUpdate: PlayerUpdate, options?: any): AxiosPromise<PlayerBase> {
            return localVarFp.updatePlayerPlayersPut(userId, playerId, playerUpdate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PlayersApi - object-oriented interface
 * @export
 * @class PlayersApi
 * @extends {BaseAPI}
 */
export class PlayersApi extends BaseAPI {
    /**
     * 
     * @summary Create Player
     * @param {PlayerBase} playerBase 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayersApi
     */
    public createPlayerPlayersPost(playerBase: PlayerBase, options?: RawAxiosRequestConfig) {
        return PlayersApiFp(this.configuration).createPlayerPlayersPost(playerBase, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Player
     * @param {string} userId 
     * @param {string} playerId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayersApi
     */
    public deletePlayerPlayersDelete(userId: string, playerId: string, options?: RawAxiosRequestConfig) {
        return PlayersApiFp(this.configuration).deletePlayerPlayersDelete(userId, playerId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Players
     * @param {string} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayersApi
     */
    public getPlayersPlayersGet(userId: string, options?: RawAxiosRequestConfig) {
        return PlayersApiFp(this.configuration).getPlayersPlayersGet(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Player
     * @param {string} userId 
     * @param {string} playerId 
     * @param {PlayerUpdate} playerUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayersApi
     */
    public updatePlayerPlayersPut(userId: string, playerId: string, playerUpdate: PlayerUpdate, options?: RawAxiosRequestConfig) {
        return PlayersApiFp(this.configuration).updatePlayerPlayersPut(userId, playerId, playerUpdate, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SeasonsApi - axios parameter creator
 * @export
 */
export const SeasonsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create Season
         * @param {SeasonBase} seasonBase 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSeasonSeasonsPost: async (seasonBase: SeasonBase, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'seasonBase' is not null or undefined
            assertParamExists('createSeasonSeasonsPost', 'seasonBase', seasonBase)
            const localVarPath = `/seasons/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(seasonBase, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Seasons
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSeasonsSeasonsGet: async (userId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getSeasonsSeasonsGet', 'userId', userId)
            const localVarPath = `/seasons/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SeasonsApi - functional programming interface
 * @export
 */
export const SeasonsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SeasonsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create Season
         * @param {SeasonBase} seasonBase 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSeasonSeasonsPost(seasonBase: SeasonBase, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SeasonBase>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSeasonSeasonsPost(seasonBase, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['SeasonsApi.createSeasonSeasonsPost']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Get Seasons
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSeasonsSeasonsGet(userId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SeasonGet>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSeasonsSeasonsGet(userId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['SeasonsApi.getSeasonsSeasonsGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * SeasonsApi - factory interface
 * @export
 */
export const SeasonsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SeasonsApiFp(configuration)
    return {
        /**
         * 
         * @summary Create Season
         * @param {SeasonBase} seasonBase 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSeasonSeasonsPost(seasonBase: SeasonBase, options?: any): AxiosPromise<SeasonBase> {
            return localVarFp.createSeasonSeasonsPost(seasonBase, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Seasons
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSeasonsSeasonsGet(userId: string, options?: any): AxiosPromise<Array<SeasonGet>> {
            return localVarFp.getSeasonsSeasonsGet(userId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SeasonsApi - object-oriented interface
 * @export
 * @class SeasonsApi
 * @extends {BaseAPI}
 */
export class SeasonsApi extends BaseAPI {
    /**
     * 
     * @summary Create Season
     * @param {SeasonBase} seasonBase 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SeasonsApi
     */
    public createSeasonSeasonsPost(seasonBase: SeasonBase, options?: RawAxiosRequestConfig) {
        return SeasonsApiFp(this.configuration).createSeasonSeasonsPost(seasonBase, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Seasons
     * @param {string} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SeasonsApi
     */
    public getSeasonsSeasonsGet(userId: string, options?: RawAxiosRequestConfig) {
        return SeasonsApiFp(this.configuration).getSeasonsSeasonsGet(userId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * TeamsApi - axios parameter creator
 * @export
 */
export const TeamsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create Team
         * @param {TeamBase} teamBase 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTeamTeamsPost: async (teamBase: TeamBase, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamBase' is not null or undefined
            assertParamExists('createTeamTeamsPost', 'teamBase', teamBase)
            const localVarPath = `/teams/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(teamBase, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Teams
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeamsTeamsGet: async (userId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getTeamsTeamsGet', 'userId', userId)
            const localVarPath = `/teams/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TeamsApi - functional programming interface
 * @export
 */
export const TeamsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TeamsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create Team
         * @param {TeamBase} teamBase 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTeamTeamsPost(teamBase: TeamBase, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TeamBase>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTeamTeamsPost(teamBase, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['TeamsApi.createTeamTeamsPost']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Get Teams
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTeamsTeamsGet(userId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TeamGet>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTeamsTeamsGet(userId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['TeamsApi.getTeamsTeamsGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * TeamsApi - factory interface
 * @export
 */
export const TeamsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TeamsApiFp(configuration)
    return {
        /**
         * 
         * @summary Create Team
         * @param {TeamBase} teamBase 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTeamTeamsPost(teamBase: TeamBase, options?: any): AxiosPromise<TeamBase> {
            return localVarFp.createTeamTeamsPost(teamBase, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Teams
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeamsTeamsGet(userId: string, options?: any): AxiosPromise<Array<TeamGet>> {
            return localVarFp.getTeamsTeamsGet(userId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TeamsApi - object-oriented interface
 * @export
 * @class TeamsApi
 * @extends {BaseAPI}
 */
export class TeamsApi extends BaseAPI {
    /**
     * 
     * @summary Create Team
     * @param {TeamBase} teamBase 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public createTeamTeamsPost(teamBase: TeamBase, options?: RawAxiosRequestConfig) {
        return TeamsApiFp(this.configuration).createTeamTeamsPost(teamBase, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Teams
     * @param {string} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public getTeamsTeamsGet(userId: string, options?: RawAxiosRequestConfig) {
        return TeamsApiFp(this.configuration).getTeamsTeamsGet(userId, options).then((request) => request(this.axios, this.basePath));
    }
}



