/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * An enumeration.
 * @export
 * @enum {string}
 */

export const AttackBallType = {
    High: 'high',
    Medium: 'medium',
    Quick: 'quick',
    Other: 'other'
} as const;

export type AttackBallType = typeof AttackBallType[keyof typeof AttackBallType];


/**
 * 
 * @export
 * @interface AttackBase
 */
export interface AttackBase {
    /**
     * 
     * @type {number}
     * @memberof AttackBase
     */
    'home_team_score': number;
    /**
     * 
     * @type {number}
     * @memberof AttackBase
     */
    'away_team_score': number;
    /**
     * 
     * @type {number}
     * @memberof AttackBase
     */
    'home_team_set_score': number;
    /**
     * 
     * @type {number}
     * @memberof AttackBase
     */
    'away_team_set_score': number;
    /**
     * 
     * @type {number}
     * @memberof AttackBase
     */
    'attack_start_zone': number;
    /**
     * 
     * @type {number}
     * @memberof AttackBase
     */
    'attack_end_zone': number;
    /**
     * 
     * @type {AttackBallType}
     * @memberof AttackBase
     */
    'attack_ball_type': AttackBallType;
    /**
     * 
     * @type {AttackSkill}
     * @memberof AttackBase
     */
    'attack_skill': AttackSkill;
    /**
     * 
     * @type {AttackEvaluationType}
     * @memberof AttackBase
     */
    'attack_evaluation': AttackEvaluationType;
    /**
     * 
     * @type {string}
     * @memberof AttackBase
     */
    'user_id': string;
    /**
     * 
     * @type {string}
     * @memberof AttackBase
     */
    'match_id': string;
    /**
     * 
     * @type {string}
     * @memberof AttackBase
     */
    'team_id': string;
    /**
     * 
     * @type {string}
     * @memberof AttackBase
     */
    'player_id': string;
}


/**
 * An enumeration.
 * @export
 * @enum {string}
 */

export const AttackEvaluationType = {
    Kill: 'kill',
    OverPass: 'overPass',
    PossibleCover: 'possibleCover',
    Blocked: 'blocked',
    InPlay: 'inPlay',
    Error: 'error'
} as const;

export type AttackEvaluationType = typeof AttackEvaluationType[keyof typeof AttackEvaluationType];


/**
 * 
 * @export
 * @interface AttackResponse
 */
export interface AttackResponse {
    /**
     * 
     * @type {number}
     * @memberof AttackResponse
     */
    'home_team_score': number;
    /**
     * 
     * @type {number}
     * @memberof AttackResponse
     */
    'away_team_score': number;
    /**
     * 
     * @type {number}
     * @memberof AttackResponse
     */
    'home_team_set_score': number;
    /**
     * 
     * @type {number}
     * @memberof AttackResponse
     */
    'away_team_set_score': number;
    /**
     * 
     * @type {number}
     * @memberof AttackResponse
     */
    'attack_start_zone': number;
    /**
     * 
     * @type {number}
     * @memberof AttackResponse
     */
    'attack_end_zone': number;
    /**
     * 
     * @type {AttackBallType}
     * @memberof AttackResponse
     */
    'attack_ball_type': AttackBallType;
    /**
     * 
     * @type {AttackSkill}
     * @memberof AttackResponse
     */
    'attack_skill': AttackSkill;
    /**
     * 
     * @type {AttackEvaluationType}
     * @memberof AttackResponse
     */
    'attack_evaluation': AttackEvaluationType;
    /**
     * 
     * @type {string}
     * @memberof AttackResponse
     */
    'user_id': string;
    /**
     * 
     * @type {string}
     * @memberof AttackResponse
     */
    'match_id': string;
    /**
     * 
     * @type {string}
     * @memberof AttackResponse
     */
    'team_id': string;
    /**
     * 
     * @type {string}
     * @memberof AttackResponse
     */
    'player_id': string;
    /**
     * 
     * @type {string}
     * @memberof AttackResponse
     */
    'uuid': string;
}


/**
 * An enumeration.
 * @export
 * @enum {string}
 */

export const AttackSkill = {
    HeadSpike: 'headSpike',
    SoftSpike: 'softSpike',
    Dink: 'dink'
} as const;

export type AttackSkill = typeof AttackSkill[keyof typeof AttackSkill];


/**
 * 
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     * 
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    'detail'?: Array<ValidationError>;
}
/**
 * 
 * @export
 * @interface Match
 */
export interface Match {
    /**
     * 
     * @type {string}
     * @memberof Match
     */
    'home_team_id': string;
    /**
     * 
     * @type {string}
     * @memberof Match
     */
    'away_team_id': string;
    /**
     * 
     * @type {string}
     * @memberof Match
     */
    'user_id': string;
    /**
     * 
     * @type {string}
     * @memberof Match
     */
    'season_id': string;
    /**
     * 
     * @type {string}
     * @memberof Match
     */
    'youtube_url': string;
}
/**
 * 
 * @export
 * @interface MatchPostRequest
 */
export interface MatchPostRequest {
    /**
     * 
     * @type {Match}
     * @memberof MatchPostRequest
     */
    'Match': Match;
    /**
     * 
     * @type {{ [key: string]: PlayerMatchInfo; }}
     * @memberof MatchPostRequest
     */
    'PlayerMatchInfo': { [key: string]: PlayerMatchInfo; };
}
/**
 * 
 * @export
 * @interface MatchResponse
 */
export interface MatchResponse {
    /**
     * 
     * @type {string}
     * @memberof MatchResponse
     */
    'uuid': string;
    /**
     * 
     * @type {TeamRequest}
     * @memberof MatchResponse
     */
    'home_team': TeamRequest;
    /**
     * 
     * @type {TeamRequest}
     * @memberof MatchResponse
     */
    'away_team': TeamRequest;
    /**
     * 
     * @type {string}
     * @memberof MatchResponse
     */
    'season_name': string;
    /**
     * 
     * @type {string}
     * @memberof MatchResponse
     */
    'youtube_url': string;
}
/**
 * 
 * @export
 * @interface PlayerBase
 */
export interface PlayerBase {
    /**
     * 
     * @type {string}
     * @memberof PlayerBase
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof PlayerBase
     */
    'player_number': number;
    /**
     * 
     * @type {string}
     * @memberof PlayerBase
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof PlayerBase
     */
    'postion': string;
    /**
     * 
     * @type {number}
     * @memberof PlayerBase
     */
    'weight': number;
    /**
     * 
     * @type {number}
     * @memberof PlayerBase
     */
    'height': number;
    /**
     * 
     * @type {string}
     * @memberof PlayerBase
     */
    'user_id': string;
    /**
     * 
     * @type {string}
     * @memberof PlayerBase
     */
    'team_id': string;
    /**
     * 
     * @type {string}
     * @memberof PlayerBase
     */
    'season_id': string;
}
/**
 * 
 * @export
 * @interface PlayerInfo
 */
export interface PlayerInfo {
    /**
     * 
     * @type {string}
     * @memberof PlayerInfo
     */
    'uuid': string;
    /**
     * 
     * @type {string}
     * @memberof PlayerInfo
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof PlayerInfo
     */
    'player_number': number;
    /**
     * 
     * @type {string}
     * @memberof PlayerInfo
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof PlayerInfo
     */
    'postion': string;
    /**
     * 
     * @type {number}
     * @memberof PlayerInfo
     */
    'weight'?: number;
    /**
     * 
     * @type {number}
     * @memberof PlayerInfo
     */
    'height'?: number;
}
/**
 * 
 * @export
 * @interface PlayerMatchInfo
 */
export interface PlayerMatchInfo {
    /**
     * 
     * @type {string}
     * @memberof PlayerMatchInfo
     */
    'player_id': string;
    /**
     * 
     * @type {boolean}
     * @memberof PlayerMatchInfo
     */
    'on_court': boolean;
    /**
     * 
     * @type {string}
     * @memberof PlayerMatchInfo
     */
    'zone_code'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof PlayerMatchInfo
     */
    'libero'?: boolean;
}
/**
 * 
 * @export
 * @interface PlayerResponse
 */
export interface PlayerResponse {
    /**
     * 
     * @type {string}
     * @memberof PlayerResponse
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof PlayerResponse
     */
    'player_number': number;
    /**
     * 
     * @type {string}
     * @memberof PlayerResponse
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof PlayerResponse
     */
    'postion': string;
    /**
     * 
     * @type {number}
     * @memberof PlayerResponse
     */
    'weight': number;
    /**
     * 
     * @type {number}
     * @memberof PlayerResponse
     */
    'height': number;
    /**
     * 
     * @type {string}
     * @memberof PlayerResponse
     */
    'user_id': string;
    /**
     * 
     * @type {string}
     * @memberof PlayerResponse
     */
    'team_id': string;
    /**
     * 
     * @type {string}
     * @memberof PlayerResponse
     */
    'season_id': string;
    /**
     * 
     * @type {string}
     * @memberof PlayerResponse
     */
    'uuid': string;
}
/**
 * 
 * @export
 * @interface SeasonBase
 */
export interface SeasonBase {
    /**
     * 
     * @type {string}
     * @memberof SeasonBase
     */
    'start_day': string;
    /**
     * 
     * @type {string}
     * @memberof SeasonBase
     */
    'end_day': string;
    /**
     * 
     * @type {string}
     * @memberof SeasonBase
     */
    'season_name': string;
    /**
     * 
     * @type {string}
     * @memberof SeasonBase
     */
    'game_format': string;
    /**
     * 
     * @type {string}
     * @memberof SeasonBase
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof SeasonBase
     */
    'user_id': string;
}
/**
 * 
 * @export
 * @interface SeasonCreate
 */
export interface SeasonCreate {
    /**
     * 
     * @type {string}
     * @memberof SeasonCreate
     */
    'start_day': string;
    /**
     * 
     * @type {string}
     * @memberof SeasonCreate
     */
    'end_day': string;
    /**
     * 
     * @type {string}
     * @memberof SeasonCreate
     */
    'season_name': string;
    /**
     * 
     * @type {string}
     * @memberof SeasonCreate
     */
    'game_format': string;
    /**
     * 
     * @type {string}
     * @memberof SeasonCreate
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof SeasonCreate
     */
    'user_id': string;
    /**
     * 
     * @type {string}
     * @memberof SeasonCreate
     */
    'uuid': string;
}
/**
 * 
 * @export
 * @interface SeasonResponse
 */
export interface SeasonResponse {
    /**
     * 
     * @type {string}
     * @memberof SeasonResponse
     */
    'start_day': string;
    /**
     * 
     * @type {string}
     * @memberof SeasonResponse
     */
    'end_day': string;
    /**
     * 
     * @type {string}
     * @memberof SeasonResponse
     */
    'season_name': string;
    /**
     * 
     * @type {string}
     * @memberof SeasonResponse
     */
    'game_format': string;
    /**
     * 
     * @type {string}
     * @memberof SeasonResponse
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof SeasonResponse
     */
    'user_id': string;
    /**
     * 
     * @type {string}
     * @memberof SeasonResponse
     */
    'uuid': string;
}
/**
 * 
 * @export
 * @interface TeamBase
 */
export interface TeamBase {
    /**
     * 
     * @type {string}
     * @memberof TeamBase
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof TeamBase
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof TeamBase
     */
    'director': string;
    /**
     * 
     * @type {string}
     * @memberof TeamBase
     */
    'coach': string;
    /**
     * 
     * @type {string}
     * @memberof TeamBase
     */
    'trainer': string;
    /**
     * 
     * @type {string}
     * @memberof TeamBase
     */
    'doctor': string;
    /**
     * 
     * @type {string}
     * @memberof TeamBase
     */
    'season_id': string;
    /**
     * 
     * @type {string}
     * @memberof TeamBase
     */
    'user_id': string;
}
/**
 * 
 * @export
 * @interface TeamPlayers
 */
export interface TeamPlayers {
    /**
     * 
     * @type {PlayerInfo}
     * @memberof TeamPlayers
     */
    'PlayerInfo': PlayerInfo;
    /**
     * 
     * @type {boolean}
     * @memberof TeamPlayers
     */
    'onCourt': boolean;
    /**
     * 
     * @type {string}
     * @memberof TeamPlayers
     */
    'zone_code'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof TeamPlayers
     */
    'libero'?: boolean;
}
/**
 * 
 * @export
 * @interface TeamRequest
 */
export interface TeamRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamRequest
     */
    'uuid': string;
    /**
     * 
     * @type {string}
     * @memberof TeamRequest
     */
    'team_name': string;
    /**
     * 
     * @type {{ [key: string]: TeamPlayers; }}
     * @memberof TeamRequest
     */
    'players': { [key: string]: TeamPlayers; };
    /**
     * 
     * @type {string}
     * @memberof TeamRequest
     */
    'setter_postion': string;
}
/**
 * 
 * @export
 * @interface TeamResponse
 */
export interface TeamResponse {
    /**
     * 
     * @type {string}
     * @memberof TeamResponse
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof TeamResponse
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof TeamResponse
     */
    'director': string;
    /**
     * 
     * @type {string}
     * @memberof TeamResponse
     */
    'coach': string;
    /**
     * 
     * @type {string}
     * @memberof TeamResponse
     */
    'trainer': string;
    /**
     * 
     * @type {string}
     * @memberof TeamResponse
     */
    'doctor': string;
    /**
     * 
     * @type {string}
     * @memberof TeamResponse
     */
    'season_id': string;
    /**
     * 
     * @type {string}
     * @memberof TeamResponse
     */
    'user_id': string;
    /**
     * 
     * @type {string}
     * @memberof TeamResponse
     */
    'uuid': string;
}
/**
 * 
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {Array<string>}
     * @memberof ValidationError
     */
    'loc': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'type': string;
}

/**
 * AttacksApi - axios parameter creator
 * @export
 */
export const AttacksApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create Attack
         * @param {AttackBase} attackBase 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAttackApiV1AttacksPost: async (attackBase: AttackBase, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'attackBase' is not null or undefined
            assertParamExists('createAttackApiV1AttacksPost', 'attackBase', attackBase)
            const localVarPath = `/api/v1/attacks/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(attackBase, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Attack
         * @param {string} attackId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAttackApiV1AttacksAttackIdDelete: async (attackId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'attackId' is not null or undefined
            assertParamExists('deleteAttackApiV1AttacksAttackIdDelete', 'attackId', attackId)
            const localVarPath = `/api/v1/attacks/{attack_id}`
                .replace(`{${"attack_id"}}`, encodeURIComponent(String(attackId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Attacks
         * @param {string} matchId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttacksApiV1AttacksGet: async (matchId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'matchId' is not null or undefined
            assertParamExists('getAttacksApiV1AttacksGet', 'matchId', matchId)
            const localVarPath = `/api/v1/attacks/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (matchId !== undefined) {
                localVarQueryParameter['match_id'] = matchId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AttacksApi - functional programming interface
 * @export
 */
export const AttacksApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AttacksApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create Attack
         * @param {AttackBase} attackBase 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAttackApiV1AttacksPost(attackBase: AttackBase, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AttackResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAttackApiV1AttacksPost(attackBase, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['AttacksApi.createAttackApiV1AttacksPost']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Delete Attack
         * @param {string} attackId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAttackApiV1AttacksAttackIdDelete(attackId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AttackResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAttackApiV1AttacksAttackIdDelete(attackId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['AttacksApi.deleteAttackApiV1AttacksAttackIdDelete']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Get Attacks
         * @param {string} matchId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAttacksApiV1AttacksGet(matchId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AttackResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAttacksApiV1AttacksGet(matchId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['AttacksApi.getAttacksApiV1AttacksGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * AttacksApi - factory interface
 * @export
 */
export const AttacksApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AttacksApiFp(configuration)
    return {
        /**
         * 
         * @summary Create Attack
         * @param {AttackBase} attackBase 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAttackApiV1AttacksPost(attackBase: AttackBase, options?: any): AxiosPromise<AttackResponse> {
            return localVarFp.createAttackApiV1AttacksPost(attackBase, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Attack
         * @param {string} attackId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAttackApiV1AttacksAttackIdDelete(attackId: string, options?: any): AxiosPromise<AttackResponse> {
            return localVarFp.deleteAttackApiV1AttacksAttackIdDelete(attackId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Attacks
         * @param {string} matchId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttacksApiV1AttacksGet(matchId: string, options?: any): AxiosPromise<Array<AttackResponse>> {
            return localVarFp.getAttacksApiV1AttacksGet(matchId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AttacksApi - object-oriented interface
 * @export
 * @class AttacksApi
 * @extends {BaseAPI}
 */
export class AttacksApi extends BaseAPI {
    /**
     * 
     * @summary Create Attack
     * @param {AttackBase} attackBase 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttacksApi
     */
    public createAttackApiV1AttacksPost(attackBase: AttackBase, options?: RawAxiosRequestConfig) {
        return AttacksApiFp(this.configuration).createAttackApiV1AttacksPost(attackBase, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Attack
     * @param {string} attackId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttacksApi
     */
    public deleteAttackApiV1AttacksAttackIdDelete(attackId: string, options?: RawAxiosRequestConfig) {
        return AttacksApiFp(this.configuration).deleteAttackApiV1AttacksAttackIdDelete(attackId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Attacks
     * @param {string} matchId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttacksApi
     */
    public getAttacksApiV1AttacksGet(matchId: string, options?: RawAxiosRequestConfig) {
        return AttacksApiFp(this.configuration).getAttacksApiV1AttacksGet(matchId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * MatchesApi - axios parameter creator
 * @export
 */
export const MatchesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create Match
         * @param {MatchPostRequest} matchPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMatchApiV1MatchesPost: async (matchPostRequest: MatchPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'matchPostRequest' is not null or undefined
            assertParamExists('createMatchApiV1MatchesPost', 'matchPostRequest', matchPostRequest)
            const localVarPath = `/api/v1/matches/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(matchPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Match
         * @param {string} matchId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMatchApiV1MatchesMatchIdGet: async (matchId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'matchId' is not null or undefined
            assertParamExists('getMatchApiV1MatchesMatchIdGet', 'matchId', matchId)
            const localVarPath = `/api/v1/matches/{match_id}`
                .replace(`{${"match_id"}}`, encodeURIComponent(String(matchId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Matches
         * @param {number} [skip] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMatchesApiV1MatchesGet: async (skip?: number, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/matches/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MatchesApi - functional programming interface
 * @export
 */
export const MatchesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MatchesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create Match
         * @param {MatchPostRequest} matchPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createMatchApiV1MatchesPost(matchPostRequest: MatchPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MatchResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createMatchApiV1MatchesPost(matchPostRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['MatchesApi.createMatchApiV1MatchesPost']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Get Match
         * @param {string} matchId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMatchApiV1MatchesMatchIdGet(matchId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MatchResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMatchApiV1MatchesMatchIdGet(matchId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['MatchesApi.getMatchApiV1MatchesMatchIdGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Get Matches
         * @param {number} [skip] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMatchesApiV1MatchesGet(skip?: number, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MatchResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMatchesApiV1MatchesGet(skip, limit, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['MatchesApi.getMatchesApiV1MatchesGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * MatchesApi - factory interface
 * @export
 */
export const MatchesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MatchesApiFp(configuration)
    return {
        /**
         * 
         * @summary Create Match
         * @param {MatchPostRequest} matchPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMatchApiV1MatchesPost(matchPostRequest: MatchPostRequest, options?: any): AxiosPromise<MatchResponse> {
            return localVarFp.createMatchApiV1MatchesPost(matchPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Match
         * @param {string} matchId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMatchApiV1MatchesMatchIdGet(matchId: string, options?: any): AxiosPromise<MatchResponse> {
            return localVarFp.getMatchApiV1MatchesMatchIdGet(matchId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Matches
         * @param {number} [skip] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMatchesApiV1MatchesGet(skip?: number, limit?: number, options?: any): AxiosPromise<Array<MatchResponse>> {
            return localVarFp.getMatchesApiV1MatchesGet(skip, limit, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MatchesApi - object-oriented interface
 * @export
 * @class MatchesApi
 * @extends {BaseAPI}
 */
export class MatchesApi extends BaseAPI {
    /**
     * 
     * @summary Create Match
     * @param {MatchPostRequest} matchPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MatchesApi
     */
    public createMatchApiV1MatchesPost(matchPostRequest: MatchPostRequest, options?: RawAxiosRequestConfig) {
        return MatchesApiFp(this.configuration).createMatchApiV1MatchesPost(matchPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Match
     * @param {string} matchId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MatchesApi
     */
    public getMatchApiV1MatchesMatchIdGet(matchId: string, options?: RawAxiosRequestConfig) {
        return MatchesApiFp(this.configuration).getMatchApiV1MatchesMatchIdGet(matchId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Matches
     * @param {number} [skip] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MatchesApi
     */
    public getMatchesApiV1MatchesGet(skip?: number, limit?: number, options?: RawAxiosRequestConfig) {
        return MatchesApiFp(this.configuration).getMatchesApiV1MatchesGet(skip, limit, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * PlayersApi - axios parameter creator
 * @export
 */
export const PlayersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create Player
         * @param {PlayerBase} playerBase 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPlayerApiV1PlayersPost: async (playerBase: PlayerBase, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'playerBase' is not null or undefined
            assertParamExists('createPlayerApiV1PlayersPost', 'playerBase', playerBase)
            const localVarPath = `/api/v1/players/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(playerBase, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Player
         * @param {string} playerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePlayerApiV1PlayersDelete: async (playerId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'playerId' is not null or undefined
            assertParamExists('deletePlayerApiV1PlayersDelete', 'playerId', playerId)
            const localVarPath = `/api/v1/players/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (playerId !== undefined) {
                localVarQueryParameter['player_id'] = playerId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Players
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlayersApiV1PlayersGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/players/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Player
         * @param {string} playerId 
         * @param {PlayerBase} playerBase 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePlayerApiV1PlayersPlayerIdPut: async (playerId: string, playerBase: PlayerBase, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'playerId' is not null or undefined
            assertParamExists('updatePlayerApiV1PlayersPlayerIdPut', 'playerId', playerId)
            // verify required parameter 'playerBase' is not null or undefined
            assertParamExists('updatePlayerApiV1PlayersPlayerIdPut', 'playerBase', playerBase)
            const localVarPath = `/api/v1/players/{player_id}`
                .replace(`{${"player_id"}}`, encodeURIComponent(String(playerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(playerBase, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PlayersApi - functional programming interface
 * @export
 */
export const PlayersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PlayersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create Player
         * @param {PlayerBase} playerBase 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPlayerApiV1PlayersPost(playerBase: PlayerBase, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlayerResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPlayerApiV1PlayersPost(playerBase, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PlayersApi.createPlayerApiV1PlayersPost']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Delete Player
         * @param {string} playerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePlayerApiV1PlayersDelete(playerId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlayerResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePlayerApiV1PlayersDelete(playerId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PlayersApi.deletePlayerApiV1PlayersDelete']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Get Players
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPlayersApiV1PlayersGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PlayerResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPlayersApiV1PlayersGet(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PlayersApi.getPlayersApiV1PlayersGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Update Player
         * @param {string} playerId 
         * @param {PlayerBase} playerBase 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePlayerApiV1PlayersPlayerIdPut(playerId: string, playerBase: PlayerBase, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlayerResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePlayerApiV1PlayersPlayerIdPut(playerId, playerBase, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PlayersApi.updatePlayerApiV1PlayersPlayerIdPut']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * PlayersApi - factory interface
 * @export
 */
export const PlayersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PlayersApiFp(configuration)
    return {
        /**
         * 
         * @summary Create Player
         * @param {PlayerBase} playerBase 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPlayerApiV1PlayersPost(playerBase: PlayerBase, options?: any): AxiosPromise<PlayerResponse> {
            return localVarFp.createPlayerApiV1PlayersPost(playerBase, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Player
         * @param {string} playerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePlayerApiV1PlayersDelete(playerId: string, options?: any): AxiosPromise<PlayerResponse> {
            return localVarFp.deletePlayerApiV1PlayersDelete(playerId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Players
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlayersApiV1PlayersGet(options?: any): AxiosPromise<Array<PlayerResponse>> {
            return localVarFp.getPlayersApiV1PlayersGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Player
         * @param {string} playerId 
         * @param {PlayerBase} playerBase 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePlayerApiV1PlayersPlayerIdPut(playerId: string, playerBase: PlayerBase, options?: any): AxiosPromise<PlayerResponse> {
            return localVarFp.updatePlayerApiV1PlayersPlayerIdPut(playerId, playerBase, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PlayersApi - object-oriented interface
 * @export
 * @class PlayersApi
 * @extends {BaseAPI}
 */
export class PlayersApi extends BaseAPI {
    /**
     * 
     * @summary Create Player
     * @param {PlayerBase} playerBase 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayersApi
     */
    public createPlayerApiV1PlayersPost(playerBase: PlayerBase, options?: RawAxiosRequestConfig) {
        return PlayersApiFp(this.configuration).createPlayerApiV1PlayersPost(playerBase, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Player
     * @param {string} playerId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayersApi
     */
    public deletePlayerApiV1PlayersDelete(playerId: string, options?: RawAxiosRequestConfig) {
        return PlayersApiFp(this.configuration).deletePlayerApiV1PlayersDelete(playerId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Players
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayersApi
     */
    public getPlayersApiV1PlayersGet(options?: RawAxiosRequestConfig) {
        return PlayersApiFp(this.configuration).getPlayersApiV1PlayersGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Player
     * @param {string} playerId 
     * @param {PlayerBase} playerBase 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayersApi
     */
    public updatePlayerApiV1PlayersPlayerIdPut(playerId: string, playerBase: PlayerBase, options?: RawAxiosRequestConfig) {
        return PlayersApiFp(this.configuration).updatePlayerApiV1PlayersPlayerIdPut(playerId, playerBase, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SeasonsApi - axios parameter creator
 * @export
 */
export const SeasonsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create Season
         * @param {SeasonBase} seasonBase 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSeasonApiV1SeasonsPost: async (seasonBase: SeasonBase, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'seasonBase' is not null or undefined
            assertParamExists('createSeasonApiV1SeasonsPost', 'seasonBase', seasonBase)
            const localVarPath = `/api/v1/seasons/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(seasonBase, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Season
         * @param {string} seasonId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSeasonApiV1SeasonsSeasonIdDelete: async (seasonId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'seasonId' is not null or undefined
            assertParamExists('deleteSeasonApiV1SeasonsSeasonIdDelete', 'seasonId', seasonId)
            const localVarPath = `/api/v1/seasons/{season_id}`
                .replace(`{${"season_id"}}`, encodeURIComponent(String(seasonId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Seasons
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSeasonsApiV1SeasonsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/seasons/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Season
         * @param {string} seasonId 
         * @param {SeasonCreate} seasonCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSeasonApiV1SeasonsSeasonIdPut: async (seasonId: string, seasonCreate: SeasonCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'seasonId' is not null or undefined
            assertParamExists('updateSeasonApiV1SeasonsSeasonIdPut', 'seasonId', seasonId)
            // verify required parameter 'seasonCreate' is not null or undefined
            assertParamExists('updateSeasonApiV1SeasonsSeasonIdPut', 'seasonCreate', seasonCreate)
            const localVarPath = `/api/v1/seasons/{season_id}`
                .replace(`{${"season_id"}}`, encodeURIComponent(String(seasonId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(seasonCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SeasonsApi - functional programming interface
 * @export
 */
export const SeasonsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SeasonsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create Season
         * @param {SeasonBase} seasonBase 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSeasonApiV1SeasonsPost(seasonBase: SeasonBase, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SeasonResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSeasonApiV1SeasonsPost(seasonBase, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['SeasonsApi.createSeasonApiV1SeasonsPost']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Delete Season
         * @param {string} seasonId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSeasonApiV1SeasonsSeasonIdDelete(seasonId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SeasonResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSeasonApiV1SeasonsSeasonIdDelete(seasonId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['SeasonsApi.deleteSeasonApiV1SeasonsSeasonIdDelete']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Get Seasons
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSeasonsApiV1SeasonsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SeasonResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSeasonsApiV1SeasonsGet(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['SeasonsApi.getSeasonsApiV1SeasonsGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Update Season
         * @param {string} seasonId 
         * @param {SeasonCreate} seasonCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSeasonApiV1SeasonsSeasonIdPut(seasonId: string, seasonCreate: SeasonCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SeasonResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSeasonApiV1SeasonsSeasonIdPut(seasonId, seasonCreate, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['SeasonsApi.updateSeasonApiV1SeasonsSeasonIdPut']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * SeasonsApi - factory interface
 * @export
 */
export const SeasonsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SeasonsApiFp(configuration)
    return {
        /**
         * 
         * @summary Create Season
         * @param {SeasonBase} seasonBase 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSeasonApiV1SeasonsPost(seasonBase: SeasonBase, options?: any): AxiosPromise<SeasonResponse> {
            return localVarFp.createSeasonApiV1SeasonsPost(seasonBase, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Season
         * @param {string} seasonId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSeasonApiV1SeasonsSeasonIdDelete(seasonId: string, options?: any): AxiosPromise<SeasonResponse> {
            return localVarFp.deleteSeasonApiV1SeasonsSeasonIdDelete(seasonId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Seasons
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSeasonsApiV1SeasonsGet(options?: any): AxiosPromise<Array<SeasonResponse>> {
            return localVarFp.getSeasonsApiV1SeasonsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Season
         * @param {string} seasonId 
         * @param {SeasonCreate} seasonCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSeasonApiV1SeasonsSeasonIdPut(seasonId: string, seasonCreate: SeasonCreate, options?: any): AxiosPromise<SeasonResponse> {
            return localVarFp.updateSeasonApiV1SeasonsSeasonIdPut(seasonId, seasonCreate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SeasonsApi - object-oriented interface
 * @export
 * @class SeasonsApi
 * @extends {BaseAPI}
 */
export class SeasonsApi extends BaseAPI {
    /**
     * 
     * @summary Create Season
     * @param {SeasonBase} seasonBase 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SeasonsApi
     */
    public createSeasonApiV1SeasonsPost(seasonBase: SeasonBase, options?: RawAxiosRequestConfig) {
        return SeasonsApiFp(this.configuration).createSeasonApiV1SeasonsPost(seasonBase, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Season
     * @param {string} seasonId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SeasonsApi
     */
    public deleteSeasonApiV1SeasonsSeasonIdDelete(seasonId: string, options?: RawAxiosRequestConfig) {
        return SeasonsApiFp(this.configuration).deleteSeasonApiV1SeasonsSeasonIdDelete(seasonId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Seasons
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SeasonsApi
     */
    public getSeasonsApiV1SeasonsGet(options?: RawAxiosRequestConfig) {
        return SeasonsApiFp(this.configuration).getSeasonsApiV1SeasonsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Season
     * @param {string} seasonId 
     * @param {SeasonCreate} seasonCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SeasonsApi
     */
    public updateSeasonApiV1SeasonsSeasonIdPut(seasonId: string, seasonCreate: SeasonCreate, options?: RawAxiosRequestConfig) {
        return SeasonsApiFp(this.configuration).updateSeasonApiV1SeasonsSeasonIdPut(seasonId, seasonCreate, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * TeamsApi - axios parameter creator
 * @export
 */
export const TeamsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create Team
         * @param {TeamBase} teamBase 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTeamApiV1TeamsPost: async (teamBase: TeamBase, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamBase' is not null or undefined
            assertParamExists('createTeamApiV1TeamsPost', 'teamBase', teamBase)
            const localVarPath = `/api/v1/teams/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(teamBase, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Team
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTeamApiV1TeamsTeamIdDelete: async (teamId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('deleteTeamApiV1TeamsTeamIdDelete', 'teamId', teamId)
            const localVarPath = `/api/v1/teams/{team_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Teams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeamsApiV1TeamsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/teams/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Team
         * @param {string} teamId 
         * @param {TeamBase} teamBase 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTeamApiV1TeamsTeamIdPut: async (teamId: string, teamBase: TeamBase, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('updateTeamApiV1TeamsTeamIdPut', 'teamId', teamId)
            // verify required parameter 'teamBase' is not null or undefined
            assertParamExists('updateTeamApiV1TeamsTeamIdPut', 'teamBase', teamBase)
            const localVarPath = `/api/v1/teams/{team_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(teamBase, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TeamsApi - functional programming interface
 * @export
 */
export const TeamsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TeamsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create Team
         * @param {TeamBase} teamBase 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTeamApiV1TeamsPost(teamBase: TeamBase, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TeamResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTeamApiV1TeamsPost(teamBase, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['TeamsApi.createTeamApiV1TeamsPost']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Delete Team
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTeamApiV1TeamsTeamIdDelete(teamId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TeamResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTeamApiV1TeamsTeamIdDelete(teamId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['TeamsApi.deleteTeamApiV1TeamsTeamIdDelete']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Get Teams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTeamsApiV1TeamsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TeamResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTeamsApiV1TeamsGet(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['TeamsApi.getTeamsApiV1TeamsGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Update Team
         * @param {string} teamId 
         * @param {TeamBase} teamBase 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTeamApiV1TeamsTeamIdPut(teamId: string, teamBase: TeamBase, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TeamResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateTeamApiV1TeamsTeamIdPut(teamId, teamBase, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['TeamsApi.updateTeamApiV1TeamsTeamIdPut']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * TeamsApi - factory interface
 * @export
 */
export const TeamsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TeamsApiFp(configuration)
    return {
        /**
         * 
         * @summary Create Team
         * @param {TeamBase} teamBase 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTeamApiV1TeamsPost(teamBase: TeamBase, options?: any): AxiosPromise<TeamResponse> {
            return localVarFp.createTeamApiV1TeamsPost(teamBase, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Team
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTeamApiV1TeamsTeamIdDelete(teamId: string, options?: any): AxiosPromise<TeamResponse> {
            return localVarFp.deleteTeamApiV1TeamsTeamIdDelete(teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Teams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeamsApiV1TeamsGet(options?: any): AxiosPromise<Array<TeamResponse>> {
            return localVarFp.getTeamsApiV1TeamsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Team
         * @param {string} teamId 
         * @param {TeamBase} teamBase 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTeamApiV1TeamsTeamIdPut(teamId: string, teamBase: TeamBase, options?: any): AxiosPromise<TeamResponse> {
            return localVarFp.updateTeamApiV1TeamsTeamIdPut(teamId, teamBase, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TeamsApi - object-oriented interface
 * @export
 * @class TeamsApi
 * @extends {BaseAPI}
 */
export class TeamsApi extends BaseAPI {
    /**
     * 
     * @summary Create Team
     * @param {TeamBase} teamBase 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public createTeamApiV1TeamsPost(teamBase: TeamBase, options?: RawAxiosRequestConfig) {
        return TeamsApiFp(this.configuration).createTeamApiV1TeamsPost(teamBase, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Team
     * @param {string} teamId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public deleteTeamApiV1TeamsTeamIdDelete(teamId: string, options?: RawAxiosRequestConfig) {
        return TeamsApiFp(this.configuration).deleteTeamApiV1TeamsTeamIdDelete(teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Teams
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public getTeamsApiV1TeamsGet(options?: RawAxiosRequestConfig) {
        return TeamsApiFp(this.configuration).getTeamsApiV1TeamsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Team
     * @param {string} teamId 
     * @param {TeamBase} teamBase 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public updateTeamApiV1TeamsTeamIdPut(teamId: string, teamBase: TeamBase, options?: RawAxiosRequestConfig) {
        return TeamsApiFp(this.configuration).updateTeamApiV1TeamsTeamIdPut(teamId, teamBase, options).then((request) => request(this.axios, this.basePath));
    }
}



